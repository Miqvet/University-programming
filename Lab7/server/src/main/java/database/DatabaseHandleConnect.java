package database;

import java.sql.*;

public class DatabaseHandleConnect {
    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseHandleConnect(String url, String user, String password) throws SQLException {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
        if (connection ==null) System.out.println("Соединение не установлено");
    }

    /**
     * A class for connect to database.
     */
    private void connectToDataBase() throws SQLException{
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
        } catch (SQLException exception) {
            throw new SQLException("Произошла ошибка при подключении к базе данных!");
        } catch (ClassNotFoundException exception) {
            System.out.println("Драйвер управления базой дынных не найден!");
        }
    }

    public PreparedStatement getPreparedStatement(String sqlRequest, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        if (connection == null) throw new SQLException();
        int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
        preparedStatement = connection.prepareStatement(sqlRequest,autoGeneratedKeys);
        return preparedStatement;
    }
    public Connection getConnection(){
        return this.connection;
    }
    /**
     * Close connection to database.
     */
    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            System.out.println("Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    /**
     * Set commit mode of database.
     */
    public void setOffCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }

    /**
     * Set normal mode of database.
     */
    public void setOnCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при установлении нормального режима базы данных!");
        }
    }

    /**
     * Commit database status.
     */
    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    /**
     * Roll back database status without savepoint.
     */
    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }
    /**
     * Roll back database status with savepoint.
     */
    public void rollback(Savepoint savepoint) {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback(savepoint);
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    public Savepoint setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            Savepoint setSavepoint =connection.setSavepoint();
            return setSavepoint;
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при сохранении состояния базы данных!");
        }
        return null;
    }
}
